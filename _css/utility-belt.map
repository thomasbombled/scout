{
	"version": 3,
	"file": "../_sass/utility-belt.css",
	"sources": [
		"../_sass/utility-belt.scss"
	],
	"sourcesContent": [
		"/*\n* UtilityBelt - a starter kit for any SASS project\n* By @dmtintner & @hackingui\n* Documentation and examples - hackingui.com/front-end/10-best-scss-utilities/\n* V1.2.0\n*/\n\n/*\n## Triangle\n* @include triangle within a pseudo element and add positioning properties (ie. top, left)\n* $direction: up, down, left, right\n*/\n@mixin triangle($direction, $size: 8px, $color: #222) {\n    content: '';\n    display: block;\n    position: absolute;\n    height: 0;\n    width: 0;\n    @if ($direction == 'up') {\n        border-bottom: $size solid $color;\n        border-left: $size solid transparent;\n        border-right: $size solid transparent;\n        border-top: none;\n    } @else if ($direction == 'down') {\n        border-top: $size solid $color;\n        border-left: $size solid transparent;\n        border-right: $size solid transparent;\n        border-bottom: none;\n    } @else if ($direction == 'left') {\n        border-top: $size solid transparent;\n        border-bottom: $size solid transparent;\n        border-right: $size solid $color;\n        border-left: none;\n    } @else if ($direction == 'right') {\n        border-top: $size solid transparent;\n        border-bottom: $size solid transparent;\n        border-left: $size solid $color;\n        border-right: none;\n    }\n}\n\n/*\n* Currency\n*/\n%currency {\n    position: relative;\n    &:before {\n        content: '$';\n        position: relative;\n        left: 0;\n    }\n}\n\n.USD %currency:before {\n    content: '$';\n}\n\n.EUR %currency:before {\n    content: '\\20AC';\n}\n\n// must escape the html entities for each currency symbol\n.ILS %currency:before {\n    content: '\\20AA';\n}\n\n.GBP %currency:before {\n    content: '\\00A3';\n}\n\n/*\n* Clearfix\n*/\n%clearfix {\n    *zoom: 1;\n    &:after {\n        content: '';\n        display: table;\n        line-height: 0;\n        clear: both;\n    }\n}\n\n/*\n* Respond To\n*/\n// Breakpoints for each query\n$smartphone: 568px;\n//iphone 5\n$tabletPortrait: 767px;\n$tabletLandscape: 1024px;\n$desktop: 1174px;\n$largeScreen: 1400px;\n$mediumDesktop: 1200px;\n@mixin respondTo($media) {\n    @if $media == smartphone {\n        @media (max-width: $smartphone) {\n            @content;\n        }\n    } @else if $media == tablet {\n        @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) {\n            @content;\n        }\n    } @else if $media == smallScreen {\n        @media (max-width: $desktop) {\n            @content;\n        }\n    } @else if $media == desktop {\n        @media (min-width: $desktop) {\n            @content;\n        }\n    } @else if $media == mediumDesktop {\n        @media (max-width: $mediumDesktop) {\n            @content;\n        }\n    } @else if $media == largeScreen {\n        @media (max-width: $largeScreen) {\n            @content;\n        }\n    }\n}\n\n/*\n* Ghost Vertical Align\n*/\n@mixin ghostVerticalAlign($pseudoEl: before) {\n    &:#{$pseudoEl} {\n        content: '';\n        display: inline-block;\n        vertical-align: middle;\n        height: 100%;\n        width: .1px;\n    }\n}\n\n%vertical-align {\n    @include ghostVerticalAlign();\n}\n\n/*\n* Truncate Text\nthe mixin is used for shortening long captions\noverflowing text is replaced by \"...\"\n*/\n@mixin truncateText($overflow: ellipsis) {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: $overflow; // values are: clip, ellipsis, or a string\n}\n\n@keyframes alertMe {\n    from {\n        border-width: 3px;\n        border-color: gold;\n    }\n    to {\n        border-width: 0;\n        border-color: rgba(gold, .1);\n    }\n}\n\n@mixin alerted() {\n    &:before {\n        content: '';\n        position: absolute;\n        top: 6px;\n        right: 6px;\n        height: 8px;\n        width: 8px;\n        border-radius: 10px;\n        background-color: gold;\n    }\n    &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        height: 20px;\n        width: 20px;\n        border-radius: 20px;\n        background-color: transparent;\n        border: solid gold;\n        border-width: 2px; // animates\n        box-sizing: border-box;\n        animation: alertMe 1000ms infinite ease 0ms;\n    }\n}\n\n/*\n* Resize Sprite - for resizing only a single image from a sprite\n*\n* params: $map = $<name>-sprites (ex. $icon-sprites)\n*         $sprite = file name w/o file type ending (ex. globe)\n          $percent = number (ex. 50)\n*\n* (if compass CSS3 mixins not included, uncomment the background-size row and comment the @include version)\n*/\n@mixin resize-sprite($sprite, $percent) {\n    $width: map-get($sprite, 'width');\n    $height: map-get($sprite, 'height');\n    $total_width: map-get($sprite, 'total_width');\n    $total_height: map-get($sprite, 'total_height');\n    $offset_x: ceil(map-get($sprite, 'offset_x')*($percent/100));\n    $offset_y: ceil(map-get($sprite, 'offset_y')*($percent/100));\n    .app-sprite-#{map-get($sprite, 'name')} {\n        background-size: ceil($total_width * ($percent/100)) ceil($total_height * ($percent/100));\n        width: ceil($width*($percent/100));\n        height: ceil($height*($percent/100));\n        background-position: $offset_x $offset_y;\n    }\n}\n\n/*\n* Resizes all images in a given sprite\n* mixin courtesy of Wilker LÃºcio https://gist.github.com/wilkerlucio/6442309\n* params: $only = if you want to list specific files instead of regenerating every image (ex. globe, checkmark)\n*/\n@mixin resize-sprite-set($sprite-set, $percent) {\n    @each $name, $sprite in $sprite-set {\n\n    }\n}\n/*\n## Text-align justify\nFor perfectly aligned grids that don't rely on floating elements and difficult calculations\n\n- http://www.barrelny.com/blog/text-align-justify-and-rwd/ */\n%justify {\n    text-align: justify;\n    &:after {\n        // adds a false last line to the content so justify is applied\n        content: '';\n        display: inline-block;\n        width: 100%;\n    }\n}\n\n/*\n## Placeholder Color - for styling input placeholders in every browser\n*/\n@mixin placeholderColor($color) {\n    &::-webkit-input-placeholder {\n        -webkit-transition: color 200ms;\n        color: $color;\n    }\n    &:-moz-placeholder {\n        //Firefox 18-\n        -moz-transition: color 200ms;\n        color: $color;\n    }\n    &::-moz-placeholder {\n        -moz-transition: color 200ms;\n        color: $color;\n    }\n    &:-ms-input-placeholder {\n        color: $color;\n    }\n}\n\n%customScrollBar {\n    &::-webkit-scrollbar {\n        width: 11px;\n    }\n\n    &::-webkit-scrollbar-button {\n        display: none;\n    }\n\n    &::-webkit-scrollbar-track {\n\n    }\n\n    &::-webkit-scrollbar-thumb {\n        border-left: 8px solid;\n        border-color: #7A8CA2;\n    }\n}\n"
	],
	"mappings": ";AAAA;;;;;EAKE;AAEF;;;;EAIE;AA8BF;;EAEE;AA2BF;;EAEE;AAWF;;EAEE;AAqCF;;EAEE;AAeF;;;;EAIE;AAOF,UAAU,CAAV,OAAU;EACN,AAAA,IAAI;IACA,YAAY,EAAE,GAAI;IAClB,YAAY,EAAE,IAAK;;EAEvB,AAAA,EAAE;IACE,YAAY,EAAE,CAAE;IAChB,YAAY,EAAO,sBAAI;;;;AA+B/B;;;;;;;;EAQE;AAgBF;;;;EAIE;AAMF;;;;6DAI6D;AAW7D;;EAEE",
	"names": []
}